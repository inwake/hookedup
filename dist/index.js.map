{"version":3,"file":"index.js","sources":["../src/helpers/validateInitialValue.ts","../src/hooks/useCounter/index.ts","../src/hooks/useAppVisibility.tsx"],"sourcesContent":["/**\r\n * The validator function returns\r\n * - input number for number or strings that can be parsed to a number\r\n * - 0 for other\r\n *\r\n * @param {any} initialValue\r\n *              Value to be validated\r\n *\r\n * @return {number}\r\n *         input number or 0 for wrong input\r\n *\r\n * @example\r\n *        const validatedInitialValue = validateInitialValue(initialValue);\r\n */\r\nexport const validateInitialValue = (initialValue: any) => {\r\n  if (typeof initialValue === 'string') {\r\n    console.log(\r\n      'you have passed a string when a number is required. It still may work however. Please pass a number.',\r\n    );\r\n    initialValue = parseInt(initialValue, 10);\r\n  }\r\n\r\n  if (isNaN(initialValue)) {\r\n    console.log(\r\n      'you really want to break the validation. Please pass a number as parameter. Defaulting to zero.',\r\n    );\r\n    initialValue = 0;\r\n  }\r\n  return initialValue;\r\n};\r\n","import { useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { validateInitialValue } from '../../helpers/validateInitialValue';\r\n\r\ntype IUseCounter = {\r\n  count: number;\r\n  increment: () => void;\r\n  reset: () => void;\r\n  decrement: () => void;\r\n};\r\n\r\n\r\n/**\r\n * Classic counter example to help understand the flow of this npm package\r\n *\r\n * @param    {number} initialValue\r\n *           initial counter value\r\n *\r\n * @return   {Object}\r\n *           object with count and methods\r\n *\r\n * @property {number} count\r\n *           The current count state\r\n *\r\n * @property {()=>void} increment\r\n *           the increment function\r\n *\r\n * @property {()=>void} decrement\r\n *           the decrement function\r\n *\r\n * @property {()=>void} reset\r\n *           the reset function\r\n *\r\n * @example\r\n *   const ExampleComponent = () => {\r\n *     const { count, increment, reset, decrement } = useCounter();\r\n *\r\n *     return (\r\n *       <>\r\n *         <button onClick={increment}>Increment counter</button>\r\n *         <button onClick={reset}>Reset counter</button>\r\n *         <button onClick={decrement}>Decrement counter</button>\r\n *         <p>{count}</p>\r\n *       </>\r\n *      )\r\n *    }\r\n */\r\n\r\nexport const useCounter = (initialValue: number = 0): IUseCounter => {\r\n  const validatedInitialValue = validateInitialValue(initialValue);\r\n\r\n  const [count, setCount] = useState<number>(validatedInitialValue);\r\n  const increment = useCallback(() => setCount((value) => value + 1), []);\r\n  const decrement = useCallback(() => setCount((value) => value - 1), []);\r\n  const reset = useCallback(() => setCount(validatedInitialValue), [\r\n    validatedInitialValue,\r\n  ]);\r\n  return { count, increment, decrement, reset };\r\n};\r\n\r\nuseCounter.PropTypes = {\r\n  initialValue: PropTypes.number.isRequired,\r\n};\r\n\r\nuseCounter.defaultProps = {\r\n  initialValue: 0,\r\n};\r\n","import {useState, useEffect, useRef} from 'react'\r\nimport {AppState} from 'react-native'\r\n\r\nexport default function useAppVisibility() {\r\n  const appState = useRef(AppState.currentState)\r\n  const activeState = appState.current\r\n  const [foreground, setForeground] = useState(false)\r\n  const [background, setBackground] = useState(false)\r\n  const isActive = activeState === 'active'\r\n\r\n  useEffect(function() {\r\n    setBackground(false)\r\n    setForeground(true)\r\n  }, [])\r\n\r\n  useEffect(function() {\r\n    const subscription = AppState\r\n      .addEventListener('change', onChange)\r\n\r\n    function onChange(nextAppState) {\r\n      appState.current = nextAppState\r\n\r\n      const nextActive = nextAppState === 'active'\r\n      const nextInactive = nextAppState === 'inactive'\r\n      setForeground(nextActive)\r\n      setBackground(nextInactive)}\r\n    return function() {\r\n      subscription?.remove()}\r\n  })\r\n\r\n  return {activeState,\r\n    isActive,\r\n    foreground,\r\n    background}\r\n}\r\n"],"names":["validateInitialValue","initialValue","console","log","parseInt","isNaN","useCounter","validatedInitialValue","_a","useState","count","setCount","increment","useCallback","value","decrement","reset","useAppVisibility","appState","useRef","AppState","currentState","activeState","current","foreground","setForeground","_b","background","setBackground","isActive","useEffect","subscription","addEventListener","nextAppState","nextInactive","remove","PropTypes","number","isRequired","defaultProps"],"mappings":"qbAcaA,qBAAuB,SAACC,GAcnC,MAb4B,UAAxB,OAAOA,IACTC,QAAQC,IACN,sGAAsG,EAExGF,EAAeG,SAASH,EAAc,EAAE,GAGtCI,MAAMJ,CAAY,IACpBC,QAAQC,IACN,iGAAiG,EAEnGF,EAAe,GAEVA,CACT,ECmBaK,WAAa,SAACL,GACzB,IAAMM,EAAwBP,qBADLC,eAC0BA,CAAY,EAEzDO,EAAoBC,eAAiBF,CAAqB,EAAzDG,OAAOC,OAMd,MAAO,CAAED,QAAOE,UALEC,kBAAY,WAAM,OAAAF,EAAS,SAACG,GAAU,OAAAA,EAAQ,EAAC,GAAG,EAAE,EAK3CC,UAJTF,kBAAY,WAAM,OAAAF,EAAS,SAACG,GAAU,OAAAA,EAAQ,EAAC,GAAG,EAAE,EAIhCE,MAHxBH,kBAAY,WAAM,OAAAF,EAASJ,CAAqB,GAAG,CAC/DA,EACD,EAEH,WCvDwBU,mBACtB,IAAMC,EAAWC,aAAOC,qBAASC,YAAY,EACvCC,EAAcJ,EAASK,QACvBf,EAA8BC,eAAS,CAAA,CAAK,EAA3Ce,OAAYC,OACbC,EAA8BjB,eAAS,CAAA,CAAK,EAA3CkB,OAAYC,OACbC,EAA2B,WAAhBP,EAsBjB,OApBAQ,gBAAU,WACRF,EAAc,CAAA,CAAK,EACnBH,EAAc,CAAA,CAAI,GACjB,EAAE,EAELK,gBAAU,WACR,IAAMC,EAAeX,qBAClBY,iBAAiB,SAEpB,SAAkBC,GAGhB,IACMC,EAAgC,cAHtChB,EAASK,QAAUU,GAInBR,EAFoC,WAAjBQ,CAEK,EACxBL,EAAcM,CAAY,EARU,EAStC,OAAO,WACLH,MAAAA,GAAAA,EAAcI,UACjB,EAEM,CAACb,cACNO,WACAL,aACAG,aACJ,CD0BArB,WAAW8B,UAAY,CACrBnC,aAAcmC,UAAUC,OAAOC,YAGjChC,WAAWiC,aAAe,CACxBtC,aAAc"}